// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PrivateKey extends pulumi.CustomResource {
    /**
     * Get an existing PrivateKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateKeyState, opts?: pulumi.CustomResourceOptions): PrivateKey {
        return new PrivateKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tls:index/privateKey:PrivateKey';

    /**
     * Returns true if the given object is an instance of PrivateKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateKey.__pulumiType;
    }

    /**
     * Name of the algorithm to use when generating the private key. Currently-supported values are `RSA`, `ECDSA` and
     * `ED25519`.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * When `algorithm` is `ECDSA`, the name of the elliptic curve to use. Currently-supported values are `P224`, `P256`,
     * `P384` or `P521` (default: `P224`).
     */
    public readonly ecdsaCurve!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for this resource: hexadecimal representation of the SHA1 checksum of the resource.
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    /**
     * Private key data in [OpenSSH PEM (RFC 4716)](https://datatracker.ietf.org/doc/html/rfc4716) format.
     */
    public /*out*/ readonly privateKeyOpenssh!: pulumi.Output<string>;
    /**
     * Private key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     */
    public /*out*/ readonly privateKeyPem!: pulumi.Output<string>;
    /**
     * The fingerprint of the public key data in OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the selected
     * private key format is compatible, similarly to `public_key_openssh` and the [ECDSA P224
     * limitations](../../#limitations).
     */
    public /*out*/ readonly publicKeyFingerprintMd5!: pulumi.Output<string>;
    /**
     * The fingerprint of the public key data in OpenSSH SHA256 hash format, e.g. `SHA256:...`. Only available if the selected
     * private key format is compatible, similarly to `public_key_openssh` and the [ECDSA P224
     * limitations](../../#limitations).
     */
    public /*out*/ readonly publicKeyFingerprintSha256!: pulumi.Output<string>;
    /**
     * The public key data in ["Authorized
     * Keys"](https://www.ssh.com/academy/ssh/authorized_keys/openssh#format-of-the-authorized-keys-file) format. This is
     * populated only if the configured private key is supported: this includes all `RSA` and `ED25519` keys, as well as
     * `ECDSA` keys with curves `P256`, `P384` and `P521`. `ECDSA` with curve `P224` [is not supported](../../#limitations).
     */
    public /*out*/ readonly publicKeyOpenssh!: pulumi.Output<string>;
    /**
     * Public key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     */
    public /*out*/ readonly publicKeyPem!: pulumi.Output<string>;
    /**
     * When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).
     */
    public readonly rsaBits!: pulumi.Output<number | undefined>;

    /**
     * Create a PrivateKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateKeyArgs | PrivateKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateKeyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["ecdsaCurve"] = state ? state.ecdsaCurve : undefined;
            resourceInputs["id"] = state ? state.id : undefined;
            resourceInputs["privateKeyOpenssh"] = state ? state.privateKeyOpenssh : undefined;
            resourceInputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            resourceInputs["publicKeyFingerprintMd5"] = state ? state.publicKeyFingerprintMd5 : undefined;
            resourceInputs["publicKeyFingerprintSha256"] = state ? state.publicKeyFingerprintSha256 : undefined;
            resourceInputs["publicKeyOpenssh"] = state ? state.publicKeyOpenssh : undefined;
            resourceInputs["publicKeyPem"] = state ? state.publicKeyPem : undefined;
            resourceInputs["rsaBits"] = state ? state.rsaBits : undefined;
        } else {
            const args = argsOrState as PrivateKeyArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["ecdsaCurve"] = args ? args.ecdsaCurve : undefined;
            resourceInputs["rsaBits"] = args ? args.rsaBits : undefined;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["privateKeyOpenssh"] = undefined /*out*/;
            resourceInputs["privateKeyPem"] = undefined /*out*/;
            resourceInputs["publicKeyFingerprintMd5"] = undefined /*out*/;
            resourceInputs["publicKeyFingerprintSha256"] = undefined /*out*/;
            resourceInputs["publicKeyOpenssh"] = undefined /*out*/;
            resourceInputs["publicKeyPem"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateKey resources.
 */
export interface PrivateKeyState {
    /**
     * Name of the algorithm to use when generating the private key. Currently-supported values are `RSA`, `ECDSA` and
     * `ED25519`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * When `algorithm` is `ECDSA`, the name of the elliptic curve to use. Currently-supported values are `P224`, `P256`,
     * `P384` or `P521` (default: `P224`).
     */
    ecdsaCurve?: pulumi.Input<string>;
    /**
     * Unique identifier for this resource: hexadecimal representation of the SHA1 checksum of the resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Private key data in [OpenSSH PEM (RFC 4716)](https://datatracker.ietf.org/doc/html/rfc4716) format.
     */
    privateKeyOpenssh?: pulumi.Input<string>;
    /**
     * Private key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * The fingerprint of the public key data in OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the selected
     * private key format is compatible, similarly to `public_key_openssh` and the [ECDSA P224
     * limitations](../../#limitations).
     */
    publicKeyFingerprintMd5?: pulumi.Input<string>;
    /**
     * The fingerprint of the public key data in OpenSSH SHA256 hash format, e.g. `SHA256:...`. Only available if the selected
     * private key format is compatible, similarly to `public_key_openssh` and the [ECDSA P224
     * limitations](../../#limitations).
     */
    publicKeyFingerprintSha256?: pulumi.Input<string>;
    /**
     * The public key data in ["Authorized
     * Keys"](https://www.ssh.com/academy/ssh/authorized_keys/openssh#format-of-the-authorized-keys-file) format. This is
     * populated only if the configured private key is supported: this includes all `RSA` and `ED25519` keys, as well as
     * `ECDSA` keys with curves `P256`, `P384` and `P521`. `ECDSA` with curve `P224` [is not supported](../../#limitations).
     */
    publicKeyOpenssh?: pulumi.Input<string>;
    /**
     * Public key data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
     */
    publicKeyPem?: pulumi.Input<string>;
    /**
     * When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).
     */
    rsaBits?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PrivateKey resource.
 */
export interface PrivateKeyArgs {
    /**
     * Name of the algorithm to use when generating the private key. Currently-supported values are `RSA`, `ECDSA` and
     * `ED25519`.
     */
    algorithm: pulumi.Input<string>;
    /**
     * When `algorithm` is `ECDSA`, the name of the elliptic curve to use. Currently-supported values are `P224`, `P256`,
     * `P384` or `P521` (default: `P224`).
     */
    ecdsaCurve?: pulumi.Input<string>;
    /**
     * When `algorithm` is `RSA`, the size of the generated RSA key, in bits (default: `2048`).
     */
    rsaBits?: pulumi.Input<number>;
}
