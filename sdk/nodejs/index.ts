// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CertRequestArgs, CertRequestState } from "./certRequest";
export type CertRequest = import("./certRequest").CertRequest;
export const CertRequest: typeof import("./certRequest").CertRequest = null as any;
utilities.lazyLoad(exports, ["CertRequest"], () => require("./certRequest"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetPublicKeyArgs, GetPublicKeyResult, GetPublicKeyOutputArgs } from "./getPublicKey";
export const getPublicKey: typeof import("./getPublicKey").getPublicKey = null as any;
export const getPublicKeyOutput: typeof import("./getPublicKey").getPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getPublicKey","getPublicKeyOutput"], () => require("./getPublicKey"));

export { LocallySignedCertArgs, LocallySignedCertState } from "./locallySignedCert";
export type LocallySignedCert = import("./locallySignedCert").LocallySignedCert;
export const LocallySignedCert: typeof import("./locallySignedCert").LocallySignedCert = null as any;
utilities.lazyLoad(exports, ["LocallySignedCert"], () => require("./locallySignedCert"));

export { PrivateKeyArgs, PrivateKeyState } from "./privateKey";
export type PrivateKey = import("./privateKey").PrivateKey;
export const PrivateKey: typeof import("./privateKey").PrivateKey = null as any;
utilities.lazyLoad(exports, ["PrivateKey"], () => require("./privateKey"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SelfSignedCertArgs, SelfSignedCertState } from "./selfSignedCert";
export type SelfSignedCert = import("./selfSignedCert").SelfSignedCert;
export const SelfSignedCert: typeof import("./selfSignedCert").SelfSignedCert = null as any;
utilities.lazyLoad(exports, ["SelfSignedCert"], () => require("./selfSignedCert"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tls:index/certRequest:CertRequest":
                return new CertRequest(name, <any>undefined, { urn })
            case "tls:index/locallySignedCert:LocallySignedCert":
                return new LocallySignedCert(name, <any>undefined, { urn })
            case "tls:index/privateKey:PrivateKey":
                return new PrivateKey(name, <any>undefined, { urn })
            case "tls:index/selfSignedCert:SelfSignedCert":
                return new SelfSignedCert(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tls", "index/certRequest", _module)
pulumi.runtime.registerResourceModule("tls", "index/locallySignedCert", _module)
pulumi.runtime.registerResourceModule("tls", "index/privateKey", _module)
pulumi.runtime.registerResourceModule("tls", "index/selfSignedCert", _module)
pulumi.runtime.registerResourcePackage("tls", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tls") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
