// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-tls/blob/master/website/docs/r/self_signed_cert.html.markdown.
type SelfSignedCert struct {
	s *pulumi.ResourceState
}

// NewSelfSignedCert registers a new resource with the given unique name, arguments, and options.
func NewSelfSignedCert(ctx *pulumi.Context,
	name string, args *SelfSignedCertArgs, opts ...pulumi.ResourceOpt) (*SelfSignedCert, error) {
	if args == nil || args.AllowedUses == nil {
		return nil, errors.New("missing required argument 'AllowedUses'")
	}
	if args == nil || args.KeyAlgorithm == nil {
		return nil, errors.New("missing required argument 'KeyAlgorithm'")
	}
	if args == nil || args.PrivateKeyPem == nil {
		return nil, errors.New("missing required argument 'PrivateKeyPem'")
	}
	if args == nil || args.Subjects == nil {
		return nil, errors.New("missing required argument 'Subjects'")
	}
	if args == nil || args.ValidityPeriodHours == nil {
		return nil, errors.New("missing required argument 'ValidityPeriodHours'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowedUses"] = nil
		inputs["dnsNames"] = nil
		inputs["earlyRenewalHours"] = nil
		inputs["ipAddresses"] = nil
		inputs["isCaCertificate"] = nil
		inputs["keyAlgorithm"] = nil
		inputs["privateKeyPem"] = nil
		inputs["setSubjectKeyId"] = nil
		inputs["subjects"] = nil
		inputs["uris"] = nil
		inputs["validityPeriodHours"] = nil
	} else {
		inputs["allowedUses"] = args.AllowedUses
		inputs["dnsNames"] = args.DnsNames
		inputs["earlyRenewalHours"] = args.EarlyRenewalHours
		inputs["ipAddresses"] = args.IpAddresses
		inputs["isCaCertificate"] = args.IsCaCertificate
		inputs["keyAlgorithm"] = args.KeyAlgorithm
		inputs["privateKeyPem"] = args.PrivateKeyPem
		inputs["setSubjectKeyId"] = args.SetSubjectKeyId
		inputs["subjects"] = args.Subjects
		inputs["uris"] = args.Uris
		inputs["validityPeriodHours"] = args.ValidityPeriodHours
	}
	inputs["certPem"] = nil
	inputs["readyForRenewal"] = nil
	inputs["validityEndTime"] = nil
	inputs["validityStartTime"] = nil
	s, err := ctx.RegisterResource("tls:index/selfSignedCert:SelfSignedCert", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SelfSignedCert{s: s}, nil
}

// GetSelfSignedCert gets an existing SelfSignedCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSelfSignedCert(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SelfSignedCertState, opts ...pulumi.ResourceOpt) (*SelfSignedCert, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowedUses"] = state.AllowedUses
		inputs["certPem"] = state.CertPem
		inputs["dnsNames"] = state.DnsNames
		inputs["earlyRenewalHours"] = state.EarlyRenewalHours
		inputs["ipAddresses"] = state.IpAddresses
		inputs["isCaCertificate"] = state.IsCaCertificate
		inputs["keyAlgorithm"] = state.KeyAlgorithm
		inputs["privateKeyPem"] = state.PrivateKeyPem
		inputs["readyForRenewal"] = state.ReadyForRenewal
		inputs["setSubjectKeyId"] = state.SetSubjectKeyId
		inputs["subjects"] = state.Subjects
		inputs["uris"] = state.Uris
		inputs["validityEndTime"] = state.ValidityEndTime
		inputs["validityPeriodHours"] = state.ValidityPeriodHours
		inputs["validityStartTime"] = state.ValidityStartTime
	}
	s, err := ctx.ReadResource("tls:index/selfSignedCert:SelfSignedCert", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SelfSignedCert{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SelfSignedCert) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SelfSignedCert) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List of keywords each describing a use that is permitted
// for the issued certificate. The valid keywords are listed below.
func (r *SelfSignedCert) AllowedUses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allowedUses"])
}

// The certificate data in PEM format.
func (r *SelfSignedCert) CertPem() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certPem"])
}

// List of DNS names for which a certificate is being requested.
func (r *SelfSignedCert) DnsNames() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["dnsNames"])
}

// Number of hours before the certificates expiry when a new certificate will be generated
func (r *SelfSignedCert) EarlyRenewalHours() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["earlyRenewalHours"])
}

// List of IP addresses for which a certificate is being requested.
func (r *SelfSignedCert) IpAddresses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["ipAddresses"])
}

// Boolean controlling whether the CA flag will be set in the
// generated certificate. Defaults to `false`, meaning that the certificate does not represent
// a certificate authority.
func (r *SelfSignedCert) IsCaCertificate() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isCaCertificate"])
}

// The name of the algorithm for the key provided
// in `privateKeyPem`.
func (r *SelfSignedCert) KeyAlgorithm() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyAlgorithm"])
}

// PEM-encoded private key that the certificate will belong to
func (r *SelfSignedCert) PrivateKeyPem() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKeyPem"])
}

func (r *SelfSignedCert) ReadyForRenewal() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["readyForRenewal"])
}

// If `true`, the certificate will include
// the subject key identifier. Defaults to `false`, in which case the subject
// key identifier is not set at all.
func (r *SelfSignedCert) SetSubjectKeyId() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["setSubjectKeyId"])
}

// The subject for which a certificate is being requested.
// This is a nested configuration block whose structure matches the
// corresponding block for `.CertRequest`.
func (r *SelfSignedCert) Subjects() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["subjects"])
}

// List of URIs for which a certificate is being requested.
func (r *SelfSignedCert) Uris() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["uris"])
}

// The time until which the certificate is invalid, as an
// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
func (r *SelfSignedCert) ValidityEndTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["validityEndTime"])
}

// The number of hours after initial issuing that the
// certificate will become invalid.
func (r *SelfSignedCert) ValidityPeriodHours() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["validityPeriodHours"])
}

// The time after which the certificate is valid, as an
// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
func (r *SelfSignedCert) ValidityStartTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["validityStartTime"])
}

// Input properties used for looking up and filtering SelfSignedCert resources.
type SelfSignedCertState struct {
	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses interface{}
	// The certificate data in PEM format.
	CertPem interface{}
	// List of DNS names for which a certificate is being requested.
	DnsNames interface{}
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours interface{}
	// List of IP addresses for which a certificate is being requested.
	IpAddresses interface{}
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate interface{}
	// The name of the algorithm for the key provided
	// in `privateKeyPem`.
	KeyAlgorithm interface{}
	// PEM-encoded private key that the certificate will belong to
	PrivateKeyPem interface{}
	ReadyForRenewal interface{}
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId interface{}
	// The subject for which a certificate is being requested.
	// This is a nested configuration block whose structure matches the
	// corresponding block for `.CertRequest`.
	Subjects interface{}
	// List of URIs for which a certificate is being requested.
	Uris interface{}
	// The time until which the certificate is invalid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityEndTime interface{}
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours interface{}
	// The time after which the certificate is valid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityStartTime interface{}
}

// The set of arguments for constructing a SelfSignedCert resource.
type SelfSignedCertArgs struct {
	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses interface{}
	// List of DNS names for which a certificate is being requested.
	DnsNames interface{}
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours interface{}
	// List of IP addresses for which a certificate is being requested.
	IpAddresses interface{}
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate interface{}
	// The name of the algorithm for the key provided
	// in `privateKeyPem`.
	KeyAlgorithm interface{}
	// PEM-encoded private key that the certificate will belong to
	PrivateKeyPem interface{}
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId interface{}
	// The subject for which a certificate is being requested.
	// This is a nested configuration block whose structure matches the
	// corresponding block for `.CertRequest`.
	Subjects interface{}
	// List of URIs for which a certificate is being requested.
	Uris interface{}
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours interface{}
}
