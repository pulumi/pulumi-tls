// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LocallySignedCert struct {
	pulumi.CustomResourceState

	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses pulumi.StringArrayOutput `pulumi:"allowedUses"`
	// PEM-encoded certificate data for the CA.
	CaCertPem pulumi.StringOutput `pulumi:"caCertPem"`
	// The name of the algorithm for the key provided
	// in `caPrivateKeyPem`.
	CaKeyAlgorithm pulumi.StringOutput `pulumi:"caKeyAlgorithm"`
	// PEM-encoded private key data for the CA.
	// This can be read from a separate file using the ``file`` interpolation
	// function.
	CaPrivateKeyPem pulumi.StringOutput `pulumi:"caPrivateKeyPem"`
	// The certificate data in PEM format.
	CertPem pulumi.StringOutput `pulumi:"certPem"`
	// PEM-encoded request certificate data.
	CertRequestPem pulumi.StringOutput `pulumi:"certRequestPem"`
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours pulumi.IntPtrOutput `pulumi:"earlyRenewalHours"`
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate pulumi.BoolPtrOutput `pulumi:"isCaCertificate"`
	ReadyForRenewal pulumi.BoolOutput    `pulumi:"readyForRenewal"`
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId pulumi.BoolPtrOutput `pulumi:"setSubjectKeyId"`
	// The time until which the certificate is invalid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityEndTime pulumi.StringOutput `pulumi:"validityEndTime"`
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours pulumi.IntOutput `pulumi:"validityPeriodHours"`
	// The time after which the certificate is valid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityStartTime pulumi.StringOutput `pulumi:"validityStartTime"`
}

// NewLocallySignedCert registers a new resource with the given unique name, arguments, and options.
func NewLocallySignedCert(ctx *pulumi.Context,
	name string, args *LocallySignedCertArgs, opts ...pulumi.ResourceOption) (*LocallySignedCert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedUses == nil {
		return nil, errors.New("invalid value for required argument 'AllowedUses'")
	}
	if args.CaCertPem == nil {
		return nil, errors.New("invalid value for required argument 'CaCertPem'")
	}
	if args.CaKeyAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'CaKeyAlgorithm'")
	}
	if args.CaPrivateKeyPem == nil {
		return nil, errors.New("invalid value for required argument 'CaPrivateKeyPem'")
	}
	if args.CertRequestPem == nil {
		return nil, errors.New("invalid value for required argument 'CertRequestPem'")
	}
	if args.ValidityPeriodHours == nil {
		return nil, errors.New("invalid value for required argument 'ValidityPeriodHours'")
	}
	var resource LocallySignedCert
	err := ctx.RegisterResource("tls:index/locallySignedCert:LocallySignedCert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocallySignedCert gets an existing LocallySignedCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocallySignedCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocallySignedCertState, opts ...pulumi.ResourceOption) (*LocallySignedCert, error) {
	var resource LocallySignedCert
	err := ctx.ReadResource("tls:index/locallySignedCert:LocallySignedCert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocallySignedCert resources.
type locallySignedCertState struct {
	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses []string `pulumi:"allowedUses"`
	// PEM-encoded certificate data for the CA.
	CaCertPem *string `pulumi:"caCertPem"`
	// The name of the algorithm for the key provided
	// in `caPrivateKeyPem`.
	CaKeyAlgorithm *string `pulumi:"caKeyAlgorithm"`
	// PEM-encoded private key data for the CA.
	// This can be read from a separate file using the ``file`` interpolation
	// function.
	CaPrivateKeyPem *string `pulumi:"caPrivateKeyPem"`
	// The certificate data in PEM format.
	CertPem *string `pulumi:"certPem"`
	// PEM-encoded request certificate data.
	CertRequestPem *string `pulumi:"certRequestPem"`
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours *int `pulumi:"earlyRenewalHours"`
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate *bool `pulumi:"isCaCertificate"`
	ReadyForRenewal *bool `pulumi:"readyForRenewal"`
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId *bool `pulumi:"setSubjectKeyId"`
	// The time until which the certificate is invalid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityEndTime *string `pulumi:"validityEndTime"`
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours *int `pulumi:"validityPeriodHours"`
	// The time after which the certificate is valid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityStartTime *string `pulumi:"validityStartTime"`
}

type LocallySignedCertState struct {
	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses pulumi.StringArrayInput
	// PEM-encoded certificate data for the CA.
	CaCertPem pulumi.StringPtrInput
	// The name of the algorithm for the key provided
	// in `caPrivateKeyPem`.
	CaKeyAlgorithm pulumi.StringPtrInput
	// PEM-encoded private key data for the CA.
	// This can be read from a separate file using the ``file`` interpolation
	// function.
	CaPrivateKeyPem pulumi.StringPtrInput
	// The certificate data in PEM format.
	CertPem pulumi.StringPtrInput
	// PEM-encoded request certificate data.
	CertRequestPem pulumi.StringPtrInput
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours pulumi.IntPtrInput
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate pulumi.BoolPtrInput
	ReadyForRenewal pulumi.BoolPtrInput
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId pulumi.BoolPtrInput
	// The time until which the certificate is invalid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityEndTime pulumi.StringPtrInput
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours pulumi.IntPtrInput
	// The time after which the certificate is valid, as an
	// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	ValidityStartTime pulumi.StringPtrInput
}

func (LocallySignedCertState) ElementType() reflect.Type {
	return reflect.TypeOf((*locallySignedCertState)(nil)).Elem()
}

type locallySignedCertArgs struct {
	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses []string `pulumi:"allowedUses"`
	// PEM-encoded certificate data for the CA.
	CaCertPem string `pulumi:"caCertPem"`
	// The name of the algorithm for the key provided
	// in `caPrivateKeyPem`.
	CaKeyAlgorithm string `pulumi:"caKeyAlgorithm"`
	// PEM-encoded private key data for the CA.
	// This can be read from a separate file using the ``file`` interpolation
	// function.
	CaPrivateKeyPem string `pulumi:"caPrivateKeyPem"`
	// PEM-encoded request certificate data.
	CertRequestPem string `pulumi:"certRequestPem"`
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours *int `pulumi:"earlyRenewalHours"`
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate *bool `pulumi:"isCaCertificate"`
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId *bool `pulumi:"setSubjectKeyId"`
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours int `pulumi:"validityPeriodHours"`
}

// The set of arguments for constructing a LocallySignedCert resource.
type LocallySignedCertArgs struct {
	// List of keywords each describing a use that is permitted
	// for the issued certificate. The valid keywords are listed below.
	AllowedUses pulumi.StringArrayInput
	// PEM-encoded certificate data for the CA.
	CaCertPem pulumi.StringInput
	// The name of the algorithm for the key provided
	// in `caPrivateKeyPem`.
	CaKeyAlgorithm pulumi.StringInput
	// PEM-encoded private key data for the CA.
	// This can be read from a separate file using the ``file`` interpolation
	// function.
	CaPrivateKeyPem pulumi.StringInput
	// PEM-encoded request certificate data.
	CertRequestPem pulumi.StringInput
	// Number of hours before the certificates expiry when a new certificate will be generated
	EarlyRenewalHours pulumi.IntPtrInput
	// Boolean controlling whether the CA flag will be set in the
	// generated certificate. Defaults to `false`, meaning that the certificate does not represent
	// a certificate authority.
	IsCaCertificate pulumi.BoolPtrInput
	// If `true`, the certificate will include
	// the subject key identifier. Defaults to `false`, in which case the subject
	// key identifier is not set at all.
	SetSubjectKeyId pulumi.BoolPtrInput
	// The number of hours after initial issuing that the
	// certificate will become invalid.
	ValidityPeriodHours pulumi.IntInput
}

func (LocallySignedCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locallySignedCertArgs)(nil)).Elem()
}

type LocallySignedCertInput interface {
	pulumi.Input

	ToLocallySignedCertOutput() LocallySignedCertOutput
	ToLocallySignedCertOutputWithContext(ctx context.Context) LocallySignedCertOutput
}

func (*LocallySignedCert) ElementType() reflect.Type {
	return reflect.TypeOf((**LocallySignedCert)(nil)).Elem()
}

func (i *LocallySignedCert) ToLocallySignedCertOutput() LocallySignedCertOutput {
	return i.ToLocallySignedCertOutputWithContext(context.Background())
}

func (i *LocallySignedCert) ToLocallySignedCertOutputWithContext(ctx context.Context) LocallySignedCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocallySignedCertOutput)
}

// LocallySignedCertArrayInput is an input type that accepts LocallySignedCertArray and LocallySignedCertArrayOutput values.
// You can construct a concrete instance of `LocallySignedCertArrayInput` via:
//
//          LocallySignedCertArray{ LocallySignedCertArgs{...} }
type LocallySignedCertArrayInput interface {
	pulumi.Input

	ToLocallySignedCertArrayOutput() LocallySignedCertArrayOutput
	ToLocallySignedCertArrayOutputWithContext(context.Context) LocallySignedCertArrayOutput
}

type LocallySignedCertArray []LocallySignedCertInput

func (LocallySignedCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocallySignedCert)(nil)).Elem()
}

func (i LocallySignedCertArray) ToLocallySignedCertArrayOutput() LocallySignedCertArrayOutput {
	return i.ToLocallySignedCertArrayOutputWithContext(context.Background())
}

func (i LocallySignedCertArray) ToLocallySignedCertArrayOutputWithContext(ctx context.Context) LocallySignedCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocallySignedCertArrayOutput)
}

// LocallySignedCertMapInput is an input type that accepts LocallySignedCertMap and LocallySignedCertMapOutput values.
// You can construct a concrete instance of `LocallySignedCertMapInput` via:
//
//          LocallySignedCertMap{ "key": LocallySignedCertArgs{...} }
type LocallySignedCertMapInput interface {
	pulumi.Input

	ToLocallySignedCertMapOutput() LocallySignedCertMapOutput
	ToLocallySignedCertMapOutputWithContext(context.Context) LocallySignedCertMapOutput
}

type LocallySignedCertMap map[string]LocallySignedCertInput

func (LocallySignedCertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocallySignedCert)(nil)).Elem()
}

func (i LocallySignedCertMap) ToLocallySignedCertMapOutput() LocallySignedCertMapOutput {
	return i.ToLocallySignedCertMapOutputWithContext(context.Background())
}

func (i LocallySignedCertMap) ToLocallySignedCertMapOutputWithContext(ctx context.Context) LocallySignedCertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocallySignedCertMapOutput)
}

type LocallySignedCertOutput struct{ *pulumi.OutputState }

func (LocallySignedCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocallySignedCert)(nil)).Elem()
}

func (o LocallySignedCertOutput) ToLocallySignedCertOutput() LocallySignedCertOutput {
	return o
}

func (o LocallySignedCertOutput) ToLocallySignedCertOutputWithContext(ctx context.Context) LocallySignedCertOutput {
	return o
}

type LocallySignedCertArrayOutput struct{ *pulumi.OutputState }

func (LocallySignedCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocallySignedCert)(nil)).Elem()
}

func (o LocallySignedCertArrayOutput) ToLocallySignedCertArrayOutput() LocallySignedCertArrayOutput {
	return o
}

func (o LocallySignedCertArrayOutput) ToLocallySignedCertArrayOutputWithContext(ctx context.Context) LocallySignedCertArrayOutput {
	return o
}

func (o LocallySignedCertArrayOutput) Index(i pulumi.IntInput) LocallySignedCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocallySignedCert {
		return vs[0].([]*LocallySignedCert)[vs[1].(int)]
	}).(LocallySignedCertOutput)
}

type LocallySignedCertMapOutput struct{ *pulumi.OutputState }

func (LocallySignedCertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocallySignedCert)(nil)).Elem()
}

func (o LocallySignedCertMapOutput) ToLocallySignedCertMapOutput() LocallySignedCertMapOutput {
	return o
}

func (o LocallySignedCertMapOutput) ToLocallySignedCertMapOutputWithContext(ctx context.Context) LocallySignedCertMapOutput {
	return o
}

func (o LocallySignedCertMapOutput) MapIndex(k pulumi.StringInput) LocallySignedCertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocallySignedCert {
		return vs[0].(map[string]*LocallySignedCert)[vs[1].(string)]
	}).(LocallySignedCertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocallySignedCertInput)(nil)).Elem(), &LocallySignedCert{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocallySignedCertArrayInput)(nil)).Elem(), LocallySignedCertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocallySignedCertMapInput)(nil)).Elem(), LocallySignedCertMap{})
	pulumi.RegisterOutputType(LocallySignedCertOutput{})
	pulumi.RegisterOutputType(LocallySignedCertArrayOutput{})
	pulumi.RegisterOutputType(LocallySignedCertMapOutput{})
}
