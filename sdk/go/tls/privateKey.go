// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-tls/blob/master/website/docs/r/private_key.html.markdown.
type PrivateKey struct {
	s *pulumi.ResourceState
}

// NewPrivateKey registers a new resource with the given unique name, arguments, and options.
func NewPrivateKey(ctx *pulumi.Context,
	name string, args *PrivateKeyArgs, opts ...pulumi.ResourceOpt) (*PrivateKey, error) {
	if args == nil || args.Algorithm == nil {
		return nil, errors.New("missing required argument 'Algorithm'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["algorithm"] = nil
		inputs["ecdsaCurve"] = nil
		inputs["rsaBits"] = nil
	} else {
		inputs["algorithm"] = args.Algorithm
		inputs["ecdsaCurve"] = args.EcdsaCurve
		inputs["rsaBits"] = args.RsaBits
	}
	inputs["privateKeyPem"] = nil
	inputs["publicKeyFingerprintMd5"] = nil
	inputs["publicKeyOpenssh"] = nil
	inputs["publicKeyPem"] = nil
	s, err := ctx.RegisterResource("tls:index/privateKey:PrivateKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PrivateKey{s: s}, nil
}

// GetPrivateKey gets an existing PrivateKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PrivateKeyState, opts ...pulumi.ResourceOpt) (*PrivateKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["algorithm"] = state.Algorithm
		inputs["ecdsaCurve"] = state.EcdsaCurve
		inputs["privateKeyPem"] = state.PrivateKeyPem
		inputs["publicKeyFingerprintMd5"] = state.PublicKeyFingerprintMd5
		inputs["publicKeyOpenssh"] = state.PublicKeyOpenssh
		inputs["publicKeyPem"] = state.PublicKeyPem
		inputs["rsaBits"] = state.RsaBits
	}
	s, err := ctx.ReadResource("tls:index/privateKey:PrivateKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PrivateKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PrivateKey) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PrivateKey) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the algorithm to use for
// the key. Currently-supported values are "RSA" and "ECDSA".
func (r *PrivateKey) Algorithm() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["algorithm"])
}

// When `algorithm` is "ECDSA", the name of the elliptic
// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
// default.
func (r *PrivateKey) EcdsaCurve() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ecdsaCurve"])
}

// The private key data in PEM format.
func (r *PrivateKey) PrivateKeyPem() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privateKeyPem"])
}

// The md5 hash of the public key data in
// OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
// selected private key format is compatible, as per the rules for
// `publicKeyOpenssh`.
func (r *PrivateKey) PublicKeyFingerprintMd5() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["publicKeyFingerprintMd5"])
}

// The public key data in OpenSSH `authorizedKeys`
// format, if the selected private key format is compatible. All RSA keys
// are supported, and ECDSA keys with curves "P256", "P384" and "P521"
// are supported. This attribute is empty if an incompatible ECDSA curve
// is selected.
func (r *PrivateKey) PublicKeyOpenssh() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["publicKeyOpenssh"])
}

// The public key data in PEM format.
func (r *PrivateKey) PublicKeyPem() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["publicKeyPem"])
}

// When `algorithm` is "RSA", the size of the generated
// RSA key in bits. Defaults to 2048.
func (r *PrivateKey) RsaBits() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["rsaBits"])
}

// Input properties used for looking up and filtering PrivateKey resources.
type PrivateKeyState struct {
	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm interface{}
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve interface{}
	// The private key data in PEM format.
	PrivateKeyPem interface{}
	// The md5 hash of the public key data in
	// OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
	// selected private key format is compatible, as per the rules for
	// `publicKeyOpenssh`.
	PublicKeyFingerprintMd5 interface{}
	// The public key data in OpenSSH `authorizedKeys`
	// format, if the selected private key format is compatible. All RSA keys
	// are supported, and ECDSA keys with curves "P256", "P384" and "P521"
	// are supported. This attribute is empty if an incompatible ECDSA curve
	// is selected.
	PublicKeyOpenssh interface{}
	// The public key data in PEM format.
	PublicKeyPem interface{}
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits interface{}
}

// The set of arguments for constructing a PrivateKey resource.
type PrivateKeyArgs struct {
	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm interface{}
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve interface{}
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits interface{}
}
