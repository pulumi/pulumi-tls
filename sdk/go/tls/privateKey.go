// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package tls

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-tls/blob/master/website/docs/r/private_key.html.markdown.
type PrivateKey struct {
	pulumi.CustomResourceState

	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve pulumi.StringPtrOutput `pulumi:"ecdsaCurve"`
	// The private key data in PEM format.
	PrivateKeyPem pulumi.StringOutput `pulumi:"privateKeyPem"`
	// The md5 hash of the public key data in
	// OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
	// selected private key format is compatible, as per the rules for
	// `publicKeyOpenssh`.
	PublicKeyFingerprintMd5 pulumi.StringOutput `pulumi:"publicKeyFingerprintMd5"`
	// The public key data in OpenSSH `authorizedKeys`
	// format, if the selected private key format is compatible. All RSA keys
	// are supported, and ECDSA keys with curves "P256", "P384" and "P521"
	// are supported. This attribute is empty if an incompatible ECDSA curve
	// is selected.
	PublicKeyOpenssh pulumi.StringOutput `pulumi:"publicKeyOpenssh"`
	// The public key data in PEM format.
	PublicKeyPem pulumi.StringOutput `pulumi:"publicKeyPem"`
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits pulumi.IntPtrOutput `pulumi:"rsaBits"`
}

// NewPrivateKey registers a new resource with the given unique name, arguments, and options.
func NewPrivateKey(ctx *pulumi.Context,
	name string, args *PrivateKeyArgs, opts ...pulumi.ResourceOption) (*PrivateKey, error) {
	if args == nil || args.Algorithm == nil {
		return nil, errors.New("missing required argument 'Algorithm'")
	}
	if args == nil {
		args = &PrivateKeyArgs{}
	}
	var resource PrivateKey
	err := ctx.RegisterResource("tls:index/privateKey:PrivateKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateKey gets an existing PrivateKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateKeyState, opts ...pulumi.ResourceOption) (*PrivateKey, error) {
	var resource PrivateKey
	err := ctx.ReadResource("tls:index/privateKey:PrivateKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateKey resources.
type privateKeyState struct {
	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm *string `pulumi:"algorithm"`
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve *string `pulumi:"ecdsaCurve"`
	// The private key data in PEM format.
	PrivateKeyPem *string `pulumi:"privateKeyPem"`
	// The md5 hash of the public key data in
	// OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
	// selected private key format is compatible, as per the rules for
	// `publicKeyOpenssh`.
	PublicKeyFingerprintMd5 *string `pulumi:"publicKeyFingerprintMd5"`
	// The public key data in OpenSSH `authorizedKeys`
	// format, if the selected private key format is compatible. All RSA keys
	// are supported, and ECDSA keys with curves "P256", "P384" and "P521"
	// are supported. This attribute is empty if an incompatible ECDSA curve
	// is selected.
	PublicKeyOpenssh *string `pulumi:"publicKeyOpenssh"`
	// The public key data in PEM format.
	PublicKeyPem *string `pulumi:"publicKeyPem"`
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits *int `pulumi:"rsaBits"`
}

type PrivateKeyState struct {
	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm pulumi.StringPtrInput
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve pulumi.StringPtrInput
	// The private key data in PEM format.
	PrivateKeyPem pulumi.StringPtrInput
	// The md5 hash of the public key data in
	// OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
	// selected private key format is compatible, as per the rules for
	// `publicKeyOpenssh`.
	PublicKeyFingerprintMd5 pulumi.StringPtrInput
	// The public key data in OpenSSH `authorizedKeys`
	// format, if the selected private key format is compatible. All RSA keys
	// are supported, and ECDSA keys with curves "P256", "P384" and "P521"
	// are supported. This attribute is empty if an incompatible ECDSA curve
	// is selected.
	PublicKeyOpenssh pulumi.StringPtrInput
	// The public key data in PEM format.
	PublicKeyPem pulumi.StringPtrInput
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits pulumi.IntPtrInput
}

func (PrivateKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateKeyState)(nil)).Elem()
}

type privateKeyArgs struct {
	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm string `pulumi:"algorithm"`
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve *string `pulumi:"ecdsaCurve"`
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits *int `pulumi:"rsaBits"`
}

// The set of arguments for constructing a PrivateKey resource.
type PrivateKeyArgs struct {
	// The name of the algorithm to use for
	// the key. Currently-supported values are "RSA" and "ECDSA".
	Algorithm pulumi.StringInput
	// When `algorithm` is "ECDSA", the name of the elliptic
	// curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	// default.
	EcdsaCurve pulumi.StringPtrInput
	// When `algorithm` is "RSA", the size of the generated
	// RSA key in bits. Defaults to 2048.
	RsaBits pulumi.IntPtrInput
}

func (PrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateKeyArgs)(nil)).Elem()
}

