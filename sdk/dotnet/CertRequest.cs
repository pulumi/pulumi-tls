// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tls
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-tls/blob/master/website/docs/r/cert_request.html.markdown.
    /// </summary>
    public partial class CertRequest : Pulumi.CustomResource
    {
        /// <summary>
        /// The certificate request data in PEM format.
        /// </summary>
        [Output("certRequestPem")]
        public Output<string> CertRequestPem { get; private set; } = null!;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        [Output("dnsNames")]
        public Output<ImmutableArray<string>> DnsNames { get; private set; } = null!;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// The name of the algorithm for the key provided
        /// in `private_key_pem`.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded private key that the certificate will belong to
        /// </summary>
        [Output("privateKeyPem")]
        public Output<string> PrivateKeyPem { get; private set; } = null!;

        /// <summary>
        /// The subject for which a certificate is being requested. This is
        /// a nested configuration block whose structure is described below.
        /// </summary>
        [Output("subjects")]
        public Output<ImmutableArray<Outputs.CertRequestSubjects>> Subjects { get; private set; } = null!;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        [Output("uris")]
        public Output<ImmutableArray<string>> Uris { get; private set; } = null!;


        /// <summary>
        /// Create a CertRequest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertRequest(string name, CertRequestArgs args, CustomResourceOptions? options = null)
            : base("tls:index/certRequest:CertRequest", name, args, MakeResourceOptions(options, ""))
        {
        }

        private CertRequest(string name, Input<string> id, CertRequestState? state = null, CustomResourceOptions? options = null)
            : base("tls:index/certRequest:CertRequest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertRequest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertRequest Get(string name, Input<string> id, CertRequestState? state = null, CustomResourceOptions? options = null)
        {
            return new CertRequest(name, id, state, options);
        }
    }

    public sealed class CertRequestArgs : Pulumi.ResourceArgs
    {
        [Input("dnsNames")]
        private InputList<string>? _dnsNames;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        public InputList<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<string>());
            set => _dnsNames = value;
        }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// The name of the algorithm for the key provided
        /// in `private_key_pem`.
        /// </summary>
        [Input("keyAlgorithm", required: true)]
        public Input<string> KeyAlgorithm { get; set; } = null!;

        /// <summary>
        /// PEM-encoded private key that the certificate will belong to
        /// </summary>
        [Input("privateKeyPem", required: true)]
        public Input<string> PrivateKeyPem { get; set; } = null!;

        [Input("subjects", required: true)]
        private InputList<Inputs.CertRequestSubjectsArgs>? _subjects;

        /// <summary>
        /// The subject for which a certificate is being requested. This is
        /// a nested configuration block whose structure is described below.
        /// </summary>
        public InputList<Inputs.CertRequestSubjectsArgs> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<Inputs.CertRequestSubjectsArgs>());
            set => _subjects = value;
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        public CertRequestArgs()
        {
        }
    }

    public sealed class CertRequestState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The certificate request data in PEM format.
        /// </summary>
        [Input("certRequestPem")]
        public Input<string>? CertRequestPem { get; set; }

        [Input("dnsNames")]
        private InputList<string>? _dnsNames;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        public InputList<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<string>());
            set => _dnsNames = value;
        }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// The name of the algorithm for the key provided
        /// in `private_key_pem`.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// PEM-encoded private key that the certificate will belong to
        /// </summary>
        [Input("privateKeyPem")]
        public Input<string>? PrivateKeyPem { get; set; }

        [Input("subjects")]
        private InputList<Inputs.CertRequestSubjectsGetArgs>? _subjects;

        /// <summary>
        /// The subject for which a certificate is being requested. This is
        /// a nested configuration block whose structure is described below.
        /// </summary>
        public InputList<Inputs.CertRequestSubjectsGetArgs> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<Inputs.CertRequestSubjectsGetArgs>());
            set => _subjects = value;
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        public CertRequestState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class CertRequestSubjectsArgs : Pulumi.ResourceArgs
    {
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        [Input("country")]
        public Input<string>? Country { get; set; }

        [Input("locality")]
        public Input<string>? Locality { get; set; }

        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("organizationalUnit")]
        public Input<string>? OrganizationalUnit { get; set; }

        [Input("postalCode")]
        public Input<string>? PostalCode { get; set; }

        [Input("province")]
        public Input<string>? Province { get; set; }

        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        [Input("streetAddresses")]
        private InputList<string>? _streetAddresses;
        public InputList<string> StreetAddresses
        {
            get => _streetAddresses ?? (_streetAddresses = new InputList<string>());
            set => _streetAddresses = value;
        }

        public CertRequestSubjectsArgs()
        {
        }
    }

    public sealed class CertRequestSubjectsGetArgs : Pulumi.ResourceArgs
    {
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        [Input("country")]
        public Input<string>? Country { get; set; }

        [Input("locality")]
        public Input<string>? Locality { get; set; }

        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("organizationalUnit")]
        public Input<string>? OrganizationalUnit { get; set; }

        [Input("postalCode")]
        public Input<string>? PostalCode { get; set; }

        [Input("province")]
        public Input<string>? Province { get; set; }

        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        [Input("streetAddresses")]
        private InputList<string>? _streetAddresses;
        public InputList<string> StreetAddresses
        {
            get => _streetAddresses ?? (_streetAddresses = new InputList<string>());
            set => _streetAddresses = value;
        }

        public CertRequestSubjectsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class CertRequestSubjects
    {
        public readonly string? CommonName;
        public readonly string? Country;
        public readonly string? Locality;
        public readonly string? Organization;
        public readonly string? OrganizationalUnit;
        public readonly string? PostalCode;
        public readonly string? Province;
        public readonly string? SerialNumber;
        public readonly ImmutableArray<string> StreetAddresses;

        [OutputConstructor]
        private CertRequestSubjects(
            string? commonName,
            string? country,
            string? locality,
            string? organization,
            string? organizationalUnit,
            string? postalCode,
            string? province,
            string? serialNumber,
            ImmutableArray<string> streetAddresses)
        {
            CommonName = commonName;
            Country = country;
            Locality = locality;
            Organization = organization;
            OrganizationalUnit = organizationalUnit;
            PostalCode = postalCode;
            Province = province;
            SerialNumber = serialNumber;
            StreetAddresses = streetAddresses;
        }
    }
    }
}
