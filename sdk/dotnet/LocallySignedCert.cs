// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tls
{
    [TlsResourceType("tls:index/locallySignedCert:LocallySignedCert")]
    public partial class LocallySignedCert : Pulumi.CustomResource
    {
        /// <summary>
        /// List of key usages allowed for the issued certificate. Values are defined in [RFC
        /// 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key
        /// Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key
        /// Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`,
        /// `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`,
        /// `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`,
        /// `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`,
        /// `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
        /// </summary>
        [Output("allowedUses")]
        public Output<ImmutableArray<string>> AllowedUses { get; private set; } = null!;

        /// <summary>
        /// Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421)
        /// format.
        /// </summary>
        [Output("caCertPem")]
        public Output<string> CaCertPem { get; private set; } = null!;

        /// <summary>
        /// Name of the algorithm used when generating the private key provided in `ca_private_key_pem`. **NOTE**: this is
        /// deprecated and ignored, as the key algorithm is now inferred from the key.
        /// </summary>
        [Output("caKeyAlgorithm")]
        public Output<string> CaKeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC
        /// 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Output("caPrivateKeyPem")]
        public Output<string> CaPrivateKeyPem { get; private set; } = null!;

        /// <summary>
        /// Certificate data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Output("certPem")]
        public Output<string> CertPem { get; private set; } = null!;

        /// <summary>
        /// Certificate request data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Output("certRequestPem")]
        public Output<string> CertRequestPem { get; private set; } = null!;

        /// <summary>
        /// The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
        /// can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
        /// certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
        /// revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
        /// early renewal period. (default: `0`)
        /// </summary>
        [Output("earlyRenewalHours")]
        public Output<int?> EarlyRenewalHours { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for this resource: the certificate serial number.
        /// </summary>
        [Output("id")]
        public Output<string> Id { get; private set; } = null!;

        /// <summary>
        /// Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
        /// </summary>
        [Output("isCaCertificate")]
        public Output<bool?> IsCaCertificate { get; private set; } = null!;

        /// <summary>
        /// Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within
        /// the `early_renewal_hours`)?
        /// </summary>
        [Output("readyForRenewal")]
        public Output<bool> ReadyForRenewal { get; private set; } = null!;

        /// <summary>
        /// Should the generated certificate include a [subject key
        /// identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
        /// </summary>
        [Output("setSubjectKeyId")]
        public Output<bool?> SetSubjectKeyId { get; private set; } = null!;

        /// <summary>
        /// The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// timestamp.
        /// </summary>
        [Output("validityEndTime")]
        public Output<string> ValidityEndTime { get; private set; } = null!;

        /// <summary>
        /// Number of hours, after initial issuing, that the certificate will remain valid for.
        /// </summary>
        [Output("validityPeriodHours")]
        public Output<int> ValidityPeriodHours { get; private set; } = null!;

        /// <summary>
        /// The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
        /// </summary>
        [Output("validityStartTime")]
        public Output<string> ValidityStartTime { get; private set; } = null!;


        /// <summary>
        /// Create a LocallySignedCert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LocallySignedCert(string name, LocallySignedCertArgs args, CustomResourceOptions? options = null)
            : base("tls:index/locallySignedCert:LocallySignedCert", name, args ?? new LocallySignedCertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LocallySignedCert(string name, Input<string> id, LocallySignedCertState? state = null, CustomResourceOptions? options = null)
            : base("tls:index/locallySignedCert:LocallySignedCert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LocallySignedCert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LocallySignedCert Get(string name, Input<string> id, LocallySignedCertState? state = null, CustomResourceOptions? options = null)
        {
            return new LocallySignedCert(name, id, state, options);
        }
    }

    public sealed class LocallySignedCertArgs : Pulumi.ResourceArgs
    {
        [Input("allowedUses", required: true)]
        private InputList<string>? _allowedUses;

        /// <summary>
        /// List of key usages allowed for the issued certificate. Values are defined in [RFC
        /// 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key
        /// Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key
        /// Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`,
        /// `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`,
        /// `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`,
        /// `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`,
        /// `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
        /// </summary>
        public InputList<string> AllowedUses
        {
            get => _allowedUses ?? (_allowedUses = new InputList<string>());
            set => _allowedUses = value;
        }

        /// <summary>
        /// Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421)
        /// format.
        /// </summary>
        [Input("caCertPem", required: true)]
        public Input<string> CaCertPem { get; set; } = null!;

        /// <summary>
        /// Name of the algorithm used when generating the private key provided in `ca_private_key_pem`. **NOTE**: this is
        /// deprecated and ignored, as the key algorithm is now inferred from the key.
        /// </summary>
        [Input("caKeyAlgorithm")]
        public Input<string>? CaKeyAlgorithm { get; set; }

        /// <summary>
        /// Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC
        /// 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("caPrivateKeyPem", required: true)]
        public Input<string> CaPrivateKeyPem { get; set; } = null!;

        /// <summary>
        /// Certificate request data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("certRequestPem", required: true)]
        public Input<string> CertRequestPem { get; set; } = null!;

        /// <summary>
        /// The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
        /// can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
        /// certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
        /// revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
        /// early renewal period. (default: `0`)
        /// </summary>
        [Input("earlyRenewalHours")]
        public Input<int>? EarlyRenewalHours { get; set; }

        /// <summary>
        /// Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
        /// </summary>
        [Input("isCaCertificate")]
        public Input<bool>? IsCaCertificate { get; set; }

        /// <summary>
        /// Should the generated certificate include a [subject key
        /// identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
        /// </summary>
        [Input("setSubjectKeyId")]
        public Input<bool>? SetSubjectKeyId { get; set; }

        /// <summary>
        /// Number of hours, after initial issuing, that the certificate will remain valid for.
        /// </summary>
        [Input("validityPeriodHours", required: true)]
        public Input<int> ValidityPeriodHours { get; set; } = null!;

        public LocallySignedCertArgs()
        {
        }
    }

    public sealed class LocallySignedCertState : Pulumi.ResourceArgs
    {
        [Input("allowedUses")]
        private InputList<string>? _allowedUses;

        /// <summary>
        /// List of key usages allowed for the issued certificate. Values are defined in [RFC
        /// 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key
        /// Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key
        /// Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`,
        /// `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`,
        /// `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`,
        /// `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`,
        /// `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
        /// </summary>
        public InputList<string> AllowedUses
        {
            get => _allowedUses ?? (_allowedUses = new InputList<string>());
            set => _allowedUses = value;
        }

        /// <summary>
        /// Certificate data of the Certificate Authority (CA) in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421)
        /// format.
        /// </summary>
        [Input("caCertPem")]
        public Input<string>? CaCertPem { get; set; }

        /// <summary>
        /// Name of the algorithm used when generating the private key provided in `ca_private_key_pem`. **NOTE**: this is
        /// deprecated and ignored, as the key algorithm is now inferred from the key.
        /// </summary>
        [Input("caKeyAlgorithm")]
        public Input<string>? CaKeyAlgorithm { get; set; }

        /// <summary>
        /// Private key of the Certificate Authority (CA) used to sign the certificate, in [PEM (RFC
        /// 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("caPrivateKeyPem")]
        public Input<string>? CaPrivateKeyPem { get; set; }

        /// <summary>
        /// Certificate data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("certPem")]
        public Input<string>? CertPem { get; set; }

        /// <summary>
        /// Certificate request data in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format.
        /// </summary>
        [Input("certRequestPem")]
        public Input<string>? CertRequestPem { get; set; }

        /// <summary>
        /// The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
        /// can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
        /// certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
        /// revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
        /// early renewal period. (default: `0`)
        /// </summary>
        [Input("earlyRenewalHours")]
        public Input<int>? EarlyRenewalHours { get; set; }

        /// <summary>
        /// Unique identifier for this resource: the certificate serial number.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
        /// </summary>
        [Input("isCaCertificate")]
        public Input<bool>? IsCaCertificate { get; set; }

        /// <summary>
        /// Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within
        /// the `early_renewal_hours`)?
        /// </summary>
        [Input("readyForRenewal")]
        public Input<bool>? ReadyForRenewal { get; set; }

        /// <summary>
        /// Should the generated certificate include a [subject key
        /// identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
        /// </summary>
        [Input("setSubjectKeyId")]
        public Input<bool>? SetSubjectKeyId { get; set; }

        /// <summary>
        /// The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339)
        /// timestamp.
        /// </summary>
        [Input("validityEndTime")]
        public Input<string>? ValidityEndTime { get; set; }

        /// <summary>
        /// Number of hours, after initial issuing, that the certificate will remain valid for.
        /// </summary>
        [Input("validityPeriodHours")]
        public Input<int>? ValidityPeriodHours { get; set; }

        /// <summary>
        /// The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
        /// </summary>
        [Input("validityStartTime")]
        public Input<string>? ValidityStartTime { get; set; }

        public LocallySignedCertState()
        {
        }
    }
}
