// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tls
{
    public partial class SelfSignedCert : Pulumi.CustomResource
    {
        /// <summary>
        /// List of keywords each describing a use that is permitted
        /// for the issued certificate. The valid keywords are listed below.
        /// </summary>
        [Output("allowedUses")]
        public Output<ImmutableArray<string>> AllowedUses { get; private set; } = null!;

        /// <summary>
        /// The certificate data in PEM format.
        /// </summary>
        [Output("certPem")]
        public Output<string> CertPem { get; private set; } = null!;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        [Output("dnsNames")]
        public Output<ImmutableArray<string>> DnsNames { get; private set; } = null!;

        /// <summary>
        /// Number of hours before the certificates expiry when a new certificate will be generated
        /// </summary>
        [Output("earlyRenewalHours")]
        public Output<int?> EarlyRenewalHours { get; private set; } = null!;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// Boolean controlling whether the CA flag will be set in the
        /// generated certificate. Defaults to `false`, meaning that the certificate does not represent
        /// a certificate authority.
        /// </summary>
        [Output("isCaCertificate")]
        public Output<bool?> IsCaCertificate { get; private set; } = null!;

        /// <summary>
        /// The name of the algorithm for the key provided
        /// in `private_key_pem`.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded private key that the certificate will belong to
        /// </summary>
        [Output("privateKeyPem")]
        public Output<string> PrivateKeyPem { get; private set; } = null!;

        [Output("readyForRenewal")]
        public Output<bool> ReadyForRenewal { get; private set; } = null!;

        /// <summary>
        /// If `true`, the certificate will include
        /// the subject key identifier. Defaults to `false`, in which case the subject
        /// key identifier is not set at all.
        /// </summary>
        [Output("setSubjectKeyId")]
        public Output<bool?> SetSubjectKeyId { get; private set; } = null!;

        /// <summary>
        /// The subject for which a certificate is being requested.
        /// This is a nested configuration block whose structure matches the
        /// corresponding block for `tls..CertRequest`.
        /// </summary>
        [Output("subjects")]
        public Output<ImmutableArray<Outputs.SelfSignedCertSubject>> Subjects { get; private set; } = null!;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        [Output("uris")]
        public Output<ImmutableArray<string>> Uris { get; private set; } = null!;

        /// <summary>
        /// The time until which the certificate is invalid, as an
        /// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
        /// </summary>
        [Output("validityEndTime")]
        public Output<string> ValidityEndTime { get; private set; } = null!;

        /// <summary>
        /// The number of hours after initial issuing that the
        /// certificate will become invalid.
        /// </summary>
        [Output("validityPeriodHours")]
        public Output<int> ValidityPeriodHours { get; private set; } = null!;

        /// <summary>
        /// The time after which the certificate is valid, as an
        /// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
        /// </summary>
        [Output("validityStartTime")]
        public Output<string> ValidityStartTime { get; private set; } = null!;


        /// <summary>
        /// Create a SelfSignedCert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SelfSignedCert(string name, SelfSignedCertArgs args, CustomResourceOptions? options = null)
            : base("tls:index/selfSignedCert:SelfSignedCert", name, args ?? new SelfSignedCertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SelfSignedCert(string name, Input<string> id, SelfSignedCertState? state = null, CustomResourceOptions? options = null)
            : base("tls:index/selfSignedCert:SelfSignedCert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SelfSignedCert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SelfSignedCert Get(string name, Input<string> id, SelfSignedCertState? state = null, CustomResourceOptions? options = null)
        {
            return new SelfSignedCert(name, id, state, options);
        }
    }

    public sealed class SelfSignedCertArgs : Pulumi.ResourceArgs
    {
        [Input("allowedUses", required: true)]
        private InputList<string>? _allowedUses;

        /// <summary>
        /// List of keywords each describing a use that is permitted
        /// for the issued certificate. The valid keywords are listed below.
        /// </summary>
        public InputList<string> AllowedUses
        {
            get => _allowedUses ?? (_allowedUses = new InputList<string>());
            set => _allowedUses = value;
        }

        [Input("dnsNames")]
        private InputList<string>? _dnsNames;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        public InputList<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<string>());
            set => _dnsNames = value;
        }

        /// <summary>
        /// Number of hours before the certificates expiry when a new certificate will be generated
        /// </summary>
        [Input("earlyRenewalHours")]
        public Input<int>? EarlyRenewalHours { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// Boolean controlling whether the CA flag will be set in the
        /// generated certificate. Defaults to `false`, meaning that the certificate does not represent
        /// a certificate authority.
        /// </summary>
        [Input("isCaCertificate")]
        public Input<bool>? IsCaCertificate { get; set; }

        /// <summary>
        /// The name of the algorithm for the key provided
        /// in `private_key_pem`.
        /// </summary>
        [Input("keyAlgorithm", required: true)]
        public Input<string> KeyAlgorithm { get; set; } = null!;

        /// <summary>
        /// PEM-encoded private key that the certificate will belong to
        /// </summary>
        [Input("privateKeyPem", required: true)]
        public Input<string> PrivateKeyPem { get; set; } = null!;

        /// <summary>
        /// If `true`, the certificate will include
        /// the subject key identifier. Defaults to `false`, in which case the subject
        /// key identifier is not set at all.
        /// </summary>
        [Input("setSubjectKeyId")]
        public Input<bool>? SetSubjectKeyId { get; set; }

        [Input("subjects", required: true)]
        private InputList<Inputs.SelfSignedCertSubjectArgs>? _subjects;

        /// <summary>
        /// The subject for which a certificate is being requested.
        /// This is a nested configuration block whose structure matches the
        /// corresponding block for `tls..CertRequest`.
        /// </summary>
        public InputList<Inputs.SelfSignedCertSubjectArgs> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<Inputs.SelfSignedCertSubjectArgs>());
            set => _subjects = value;
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        /// <summary>
        /// The number of hours after initial issuing that the
        /// certificate will become invalid.
        /// </summary>
        [Input("validityPeriodHours", required: true)]
        public Input<int> ValidityPeriodHours { get; set; } = null!;

        public SelfSignedCertArgs()
        {
        }
    }

    public sealed class SelfSignedCertState : Pulumi.ResourceArgs
    {
        [Input("allowedUses")]
        private InputList<string>? _allowedUses;

        /// <summary>
        /// List of keywords each describing a use that is permitted
        /// for the issued certificate. The valid keywords are listed below.
        /// </summary>
        public InputList<string> AllowedUses
        {
            get => _allowedUses ?? (_allowedUses = new InputList<string>());
            set => _allowedUses = value;
        }

        /// <summary>
        /// The certificate data in PEM format.
        /// </summary>
        [Input("certPem")]
        public Input<string>? CertPem { get; set; }

        [Input("dnsNames")]
        private InputList<string>? _dnsNames;

        /// <summary>
        /// List of DNS names for which a certificate is being requested.
        /// </summary>
        public InputList<string> DnsNames
        {
            get => _dnsNames ?? (_dnsNames = new InputList<string>());
            set => _dnsNames = value;
        }

        /// <summary>
        /// Number of hours before the certificates expiry when a new certificate will be generated
        /// </summary>
        [Input("earlyRenewalHours")]
        public Input<int>? EarlyRenewalHours { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// List of IP addresses for which a certificate is being requested.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// Boolean controlling whether the CA flag will be set in the
        /// generated certificate. Defaults to `false`, meaning that the certificate does not represent
        /// a certificate authority.
        /// </summary>
        [Input("isCaCertificate")]
        public Input<bool>? IsCaCertificate { get; set; }

        /// <summary>
        /// The name of the algorithm for the key provided
        /// in `private_key_pem`.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// PEM-encoded private key that the certificate will belong to
        /// </summary>
        [Input("privateKeyPem")]
        public Input<string>? PrivateKeyPem { get; set; }

        [Input("readyForRenewal")]
        public Input<bool>? ReadyForRenewal { get; set; }

        /// <summary>
        /// If `true`, the certificate will include
        /// the subject key identifier. Defaults to `false`, in which case the subject
        /// key identifier is not set at all.
        /// </summary>
        [Input("setSubjectKeyId")]
        public Input<bool>? SetSubjectKeyId { get; set; }

        [Input("subjects")]
        private InputList<Inputs.SelfSignedCertSubjectGetArgs>? _subjects;

        /// <summary>
        /// The subject for which a certificate is being requested.
        /// This is a nested configuration block whose structure matches the
        /// corresponding block for `tls..CertRequest`.
        /// </summary>
        public InputList<Inputs.SelfSignedCertSubjectGetArgs> Subjects
        {
            get => _subjects ?? (_subjects = new InputList<Inputs.SelfSignedCertSubjectGetArgs>());
            set => _subjects = value;
        }

        [Input("uris")]
        private InputList<string>? _uris;

        /// <summary>
        /// List of URIs for which a certificate is being requested.
        /// </summary>
        public InputList<string> Uris
        {
            get => _uris ?? (_uris = new InputList<string>());
            set => _uris = value;
        }

        /// <summary>
        /// The time until which the certificate is invalid, as an
        /// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
        /// </summary>
        [Input("validityEndTime")]
        public Input<string>? ValidityEndTime { get; set; }

        /// <summary>
        /// The number of hours after initial issuing that the
        /// certificate will become invalid.
        /// </summary>
        [Input("validityPeriodHours")]
        public Input<int>? ValidityPeriodHours { get; set; }

        /// <summary>
        /// The time after which the certificate is valid, as an
        /// [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
        /// </summary>
        [Input("validityStartTime")]
        public Input<string>? ValidityStartTime { get; set; }

        public SelfSignedCertState()
        {
        }
    }
}
