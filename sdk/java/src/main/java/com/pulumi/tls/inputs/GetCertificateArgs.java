// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCertificateArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCertificateArgs Empty = new GetCertificateArgs();

    /**
     * The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The URL of the website to get the certificates from. Cannot be used with `content`.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL of the website to get the certificates from. Cannot be used with `content`.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
     * 
     */
    @Import(name="verifyChain")
    private @Nullable Output<Boolean> verifyChain;

    /**
     * @return Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
     * 
     */
    public Optional<Output<Boolean>> verifyChain() {
        return Optional.ofNullable(this.verifyChain);
    }

    private GetCertificateArgs() {}

    private GetCertificateArgs(GetCertificateArgs $) {
        this.content = $.content;
        this.url = $.url;
        this.verifyChain = $.verifyChain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCertificateArgs $;

        public Builder() {
            $ = new GetCertificateArgs();
        }

        public Builder(GetCertificateArgs defaults) {
            $ = new GetCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param url The URL of the website to get the certificates from. Cannot be used with `content`.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the website to get the certificates from. Cannot be used with `content`.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param verifyChain Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
         * 
         * @return builder
         * 
         */
        public Builder verifyChain(@Nullable Output<Boolean> verifyChain) {
            $.verifyChain = verifyChain;
            return this;
        }

        /**
         * @param verifyChain Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
         * 
         * @return builder
         * 
         */
        public Builder verifyChain(Boolean verifyChain) {
            return verifyChain(Output.of(verifyChain));
        }

        public GetCertificateArgs build() {
            return $;
        }
    }

}
