// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.tls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.tls.inputs.SelfSignedCertSubjectArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SelfSignedCertState extends com.pulumi.resources.ResourceArgs {

    public static final SelfSignedCertState Empty = new SelfSignedCertState();

    /**
     * List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
     * 
     */
    @Import(name="allowedUses")
    private @Nullable Output<List<String>> allowedUses;

    /**
     * @return List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
     * 
     */
    public Optional<Output<List<String>>> allowedUses() {
        return Optional.ofNullable(this.allowedUses);
    }

    /**
     * Certificate data in PEM (RFC 1421).
     * 
     */
    @Import(name="certPem")
    private @Nullable Output<String> certPem;

    /**
     * @return Certificate data in PEM (RFC 1421).
     * 
     */
    public Optional<Output<String>> certPem() {
        return Optional.ofNullable(this.certPem);
    }

    /**
     * List of DNS names for which a certificate is being requested (i.e. certificate subjects).
     * 
     */
    @Import(name="dnsNames")
    private @Nullable Output<List<String>> dnsNames;

    /**
     * @return List of DNS names for which a certificate is being requested (i.e. certificate subjects).
     * 
     */
    public Optional<Output<List<String>>> dnsNames() {
        return Optional.ofNullable(this.dnsNames);
    }

    /**
     * The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
     * can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
     * certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
     * revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
     * early renewal period. (default: `0`)
     * 
     */
    @Import(name="earlyRenewalHours")
    private @Nullable Output<Integer> earlyRenewalHours;

    /**
     * @return The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
     * can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
     * certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
     * revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
     * early renewal period. (default: `0`)
     * 
     */
    public Optional<Output<Integer>> earlyRenewalHours() {
        return Optional.ofNullable(this.earlyRenewalHours);
    }

    /**
     * List of IP addresses for which a certificate is being requested (i.e. certificate subjects).
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable Output<List<String>> ipAddresses;

    /**
     * @return List of IP addresses for which a certificate is being requested (i.e. certificate subjects).
     * 
     */
    public Optional<Output<List<String>>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
     * 
     */
    @Import(name="isCaCertificate")
    private @Nullable Output<Boolean> isCaCertificate;

    /**
     * @return Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
     * 
     */
    public Optional<Output<Boolean>> isCaCertificate() {
        return Optional.ofNullable(this.isCaCertificate);
    }

    /**
     * Name of the algorithm used when generating the private key provided in `private_key_pem`.
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return Name of the algorithm used when generating the private key provided in `private_key_pem`.
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * Private key in PEM (RFC 1421) interpolation function.
     * 
     */
    @Import(name="privateKeyPem")
    private @Nullable Output<String> privateKeyPem;

    /**
     * @return Private key in PEM (RFC 1421) interpolation function.
     * 
     */
    public Optional<Output<String>> privateKeyPem() {
        return Optional.ofNullable(this.privateKeyPem);
    }

    /**
     * Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?
     * 
     */
    @Import(name="readyForRenewal")
    private @Nullable Output<Boolean> readyForRenewal;

    /**
     * @return Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?
     * 
     */
    public Optional<Output<Boolean>> readyForRenewal() {
        return Optional.ofNullable(this.readyForRenewal);
    }

    /**
     * Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
     * 
     */
    @Import(name="setAuthorityKeyId")
    private @Nullable Output<Boolean> setAuthorityKeyId;

    /**
     * @return Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
     * 
     */
    public Optional<Output<Boolean>> setAuthorityKeyId() {
        return Optional.ofNullable(this.setAuthorityKeyId);
    }

    /**
     * Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
     * 
     */
    @Import(name="setSubjectKeyId")
    private @Nullable Output<Boolean> setSubjectKeyId;

    /**
     * @return Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
     * 
     */
    public Optional<Output<Boolean>> setSubjectKeyId() {
        return Optional.ofNullable(this.setSubjectKeyId);
    }

    /**
     * The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https://tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<SelfSignedCertSubjectArgs> subject;

    /**
     * @return The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https://tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
     * 
     */
    public Optional<Output<SelfSignedCertSubjectArgs>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * List of URIs for which a certificate is being requested (i.e. certificate subjects).
     * 
     */
    @Import(name="uris")
    private @Nullable Output<List<String>> uris;

    /**
     * @return List of URIs for which a certificate is being requested (i.e. certificate subjects).
     * 
     */
    public Optional<Output<List<String>>> uris() {
        return Optional.ofNullable(this.uris);
    }

    /**
     * The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     * 
     */
    @Import(name="validityEndTime")
    private @Nullable Output<String> validityEndTime;

    /**
     * @return The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     * 
     */
    public Optional<Output<String>> validityEndTime() {
        return Optional.ofNullable(this.validityEndTime);
    }

    /**
     * Number of hours, after initial issuing, that the certificate will remain valid for.
     * 
     */
    @Import(name="validityPeriodHours")
    private @Nullable Output<Integer> validityPeriodHours;

    /**
     * @return Number of hours, after initial issuing, that the certificate will remain valid for.
     * 
     */
    public Optional<Output<Integer>> validityPeriodHours() {
        return Optional.ofNullable(this.validityPeriodHours);
    }

    /**
     * The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     * 
     */
    @Import(name="validityStartTime")
    private @Nullable Output<String> validityStartTime;

    /**
     * @return The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     * 
     */
    public Optional<Output<String>> validityStartTime() {
        return Optional.ofNullable(this.validityStartTime);
    }

    private SelfSignedCertState() {}

    private SelfSignedCertState(SelfSignedCertState $) {
        this.allowedUses = $.allowedUses;
        this.certPem = $.certPem;
        this.dnsNames = $.dnsNames;
        this.earlyRenewalHours = $.earlyRenewalHours;
        this.ipAddresses = $.ipAddresses;
        this.isCaCertificate = $.isCaCertificate;
        this.keyAlgorithm = $.keyAlgorithm;
        this.privateKeyPem = $.privateKeyPem;
        this.readyForRenewal = $.readyForRenewal;
        this.setAuthorityKeyId = $.setAuthorityKeyId;
        this.setSubjectKeyId = $.setSubjectKeyId;
        this.subject = $.subject;
        this.uris = $.uris;
        this.validityEndTime = $.validityEndTime;
        this.validityPeriodHours = $.validityPeriodHours;
        this.validityStartTime = $.validityStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SelfSignedCertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SelfSignedCertState $;

        public Builder() {
            $ = new SelfSignedCertState();
        }

        public Builder(SelfSignedCertState defaults) {
            $ = new SelfSignedCertState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedUses List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUses(@Nullable Output<List<String>> allowedUses) {
            $.allowedUses = allowedUses;
            return this;
        }

        /**
         * @param allowedUses List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUses(List<String> allowedUses) {
            return allowedUses(Output.of(allowedUses));
        }

        /**
         * @param allowedUses List of key usages allowed for the issued certificate. Values are defined in [RFC 5280](https://datatracker.ietf.org/doc/html/rfc5280) and combine flags defined by both [Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.3) and [Extended Key Usages](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12). Accepted values: `any_extended`, `cert_signing`, `client_auth`, `code_signing`, `content_commitment`, `crl_signing`, `data_encipherment`, `decipher_only`, `digital_signature`, `email_protection`, `encipher_only`, `ipsec_end_system`, `ipsec_tunnel`, `ipsec_user`, `key_agreement`, `key_encipherment`, `microsoft_commercial_code_signing`, `microsoft_kernel_code_signing`, `microsoft_server_gated_crypto`, `netscape_server_gated_crypto`, `ocsp_signing`, `server_auth`, `timestamping`.
         * 
         * @return builder
         * 
         */
        public Builder allowedUses(String... allowedUses) {
            return allowedUses(List.of(allowedUses));
        }

        /**
         * @param certPem Certificate data in PEM (RFC 1421).
         * 
         * @return builder
         * 
         */
        public Builder certPem(@Nullable Output<String> certPem) {
            $.certPem = certPem;
            return this;
        }

        /**
         * @param certPem Certificate data in PEM (RFC 1421).
         * 
         * @return builder
         * 
         */
        public Builder certPem(String certPem) {
            return certPem(Output.of(certPem));
        }

        /**
         * @param dnsNames List of DNS names for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder dnsNames(@Nullable Output<List<String>> dnsNames) {
            $.dnsNames = dnsNames;
            return this;
        }

        /**
         * @param dnsNames List of DNS names for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder dnsNames(List<String> dnsNames) {
            return dnsNames(Output.of(dnsNames));
        }

        /**
         * @param dnsNames List of DNS names for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder dnsNames(String... dnsNames) {
            return dnsNames(List.of(dnsNames));
        }

        /**
         * @param earlyRenewalHours The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
         * can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
         * certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
         * revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
         * early renewal period. (default: `0`)
         * 
         * @return builder
         * 
         */
        public Builder earlyRenewalHours(@Nullable Output<Integer> earlyRenewalHours) {
            $.earlyRenewalHours = earlyRenewalHours;
            return this;
        }

        /**
         * @param earlyRenewalHours The resource will consider the certificate to have expired the given number of hours before its actual expiry time. This
         * can be useful to deploy an updated certificate in advance of the expiration of the current certificate. However, the old
         * certificate remains valid until its true expiration time, since this resource does not (and cannot) support certificate
         * revocation. Also, this advance update can only be performed should the Terraform configuration be applied during the
         * early renewal period. (default: `0`)
         * 
         * @return builder
         * 
         */
        public Builder earlyRenewalHours(Integer earlyRenewalHours) {
            return earlyRenewalHours(Output.of(earlyRenewalHours));
        }

        /**
         * @param ipAddresses List of IP addresses for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable Output<List<String>> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses List of IP addresses for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(List<String> ipAddresses) {
            return ipAddresses(Output.of(ipAddresses));
        }

        /**
         * @param ipAddresses List of IP addresses for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param isCaCertificate Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder isCaCertificate(@Nullable Output<Boolean> isCaCertificate) {
            $.isCaCertificate = isCaCertificate;
            return this;
        }

        /**
         * @param isCaCertificate Is the generated certificate representing a Certificate Authority (CA) (default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder isCaCertificate(Boolean isCaCertificate) {
            return isCaCertificate(Output.of(isCaCertificate));
        }

        /**
         * @param keyAlgorithm Name of the algorithm used when generating the private key provided in `private_key_pem`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm Name of the algorithm used when generating the private key provided in `private_key_pem`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param privateKeyPem Private key in PEM (RFC 1421) interpolation function.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPem(@Nullable Output<String> privateKeyPem) {
            $.privateKeyPem = privateKeyPem;
            return this;
        }

        /**
         * @param privateKeyPem Private key in PEM (RFC 1421) interpolation function.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPem(String privateKeyPem) {
            return privateKeyPem(Output.of(privateKeyPem));
        }

        /**
         * @param readyForRenewal Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?
         * 
         * @return builder
         * 
         */
        public Builder readyForRenewal(@Nullable Output<Boolean> readyForRenewal) {
            $.readyForRenewal = readyForRenewal;
            return this;
        }

        /**
         * @param readyForRenewal Is the certificate either expired (i.e. beyond the `validity_period_hours`) or ready for an early renewal (i.e. within the `early_renewal_hours`)?
         * 
         * @return builder
         * 
         */
        public Builder readyForRenewal(Boolean readyForRenewal) {
            return readyForRenewal(Output.of(readyForRenewal));
        }

        /**
         * @param setAuthorityKeyId Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder setAuthorityKeyId(@Nullable Output<Boolean> setAuthorityKeyId) {
            $.setAuthorityKeyId = setAuthorityKeyId;
            return this;
        }

        /**
         * @param setAuthorityKeyId Should the generated certificate include an [authority key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.1): for self-signed certificates this is the same value as the [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder setAuthorityKeyId(Boolean setAuthorityKeyId) {
            return setAuthorityKeyId(Output.of(setAuthorityKeyId));
        }

        /**
         * @param setSubjectKeyId Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder setSubjectKeyId(@Nullable Output<Boolean> setSubjectKeyId) {
            $.setSubjectKeyId = setSubjectKeyId;
            return this;
        }

        /**
         * @param setSubjectKeyId Should the generated certificate include a [subject key identifier](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2) (default: `false`).
         * 
         * @return builder
         * 
         */
        public Builder setSubjectKeyId(Boolean setSubjectKeyId) {
            return setSubjectKeyId(Output.of(setSubjectKeyId));
        }

        /**
         * @param subject The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https://tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<SelfSignedCertSubjectArgs> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The subject for which a certificate is being requested. The acceptable arguments are all optional and their naming is based upon [Issuer Distinguished Names (RFC5280)](https://tools.ietf.org/html/rfc5280#section-4.1.2.4) section.
         * 
         * @return builder
         * 
         */
        public Builder subject(SelfSignedCertSubjectArgs subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param uris List of URIs for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder uris(@Nullable Output<List<String>> uris) {
            $.uris = uris;
            return this;
        }

        /**
         * @param uris List of URIs for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder uris(List<String> uris) {
            return uris(Output.of(uris));
        }

        /**
         * @param uris List of URIs for which a certificate is being requested (i.e. certificate subjects).
         * 
         * @return builder
         * 
         */
        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        /**
         * @param validityEndTime The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
         * 
         * @return builder
         * 
         */
        public Builder validityEndTime(@Nullable Output<String> validityEndTime) {
            $.validityEndTime = validityEndTime;
            return this;
        }

        /**
         * @param validityEndTime The time until which the certificate is invalid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
         * 
         * @return builder
         * 
         */
        public Builder validityEndTime(String validityEndTime) {
            return validityEndTime(Output.of(validityEndTime));
        }

        /**
         * @param validityPeriodHours Number of hours, after initial issuing, that the certificate will remain valid for.
         * 
         * @return builder
         * 
         */
        public Builder validityPeriodHours(@Nullable Output<Integer> validityPeriodHours) {
            $.validityPeriodHours = validityPeriodHours;
            return this;
        }

        /**
         * @param validityPeriodHours Number of hours, after initial issuing, that the certificate will remain valid for.
         * 
         * @return builder
         * 
         */
        public Builder validityPeriodHours(Integer validityPeriodHours) {
            return validityPeriodHours(Output.of(validityPeriodHours));
        }

        /**
         * @param validityStartTime The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
         * 
         * @return builder
         * 
         */
        public Builder validityStartTime(@Nullable Output<String> validityStartTime) {
            $.validityStartTime = validityStartTime;
            return this;
        }

        /**
         * @param validityStartTime The time after which the certificate is valid, expressed as an [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
         * 
         * @return builder
         * 
         */
        public Builder validityStartTime(String validityStartTime) {
            return validityStartTime(Output.of(validityStartTime));
        }

        public SelfSignedCertState build() {
            return $;
        }
    }

}
