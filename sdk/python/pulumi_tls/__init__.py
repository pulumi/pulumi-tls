# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .cert_request import *
from .get_certificate import *
from .get_public_key import *
from .locally_signed_cert import *
from .private_key import *
from .provider import *
from .self_signed_cert import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from . import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "tls:index/certRequest:CertRequest":
                return CertRequest(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "tls:index/locallySignedCert:LocallySignedCert":
                return LocallySignedCert(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "tls:index/privateKey:PrivateKey":
                return PrivateKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "tls:index/selfSignedCert:SelfSignedCert":
                return SelfSignedCert(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("tls", "index/certRequest", _module_instance)
    pulumi.runtime.register_resource_module("tls", "index/locallySignedCert", _module_instance)
    pulumi.runtime.register_resource_module("tls", "index/privateKey", _module_instance)
    pulumi.runtime.register_resource_module("tls", "index/selfSignedCert", _module_instance)


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:tls":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("tls", Package())

_register_module()
