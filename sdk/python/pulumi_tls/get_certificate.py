# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCertificateResult',
    'AwaitableGetCertificateResult',
    'get_certificate',
    'get_certificate_output',
]

@pulumi.output_type
class GetCertificateResult:
    """
    A collection of values returned by getCertificate.
    """
    def __init__(__self__, certificates=None, content=None, id=None, url=None, verify_chain=None):
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if verify_chain and not isinstance(verify_chain, bool):
            raise TypeError("Expected argument 'verify_chain' to be a bool")
        pulumi.set(__self__, "verify_chain", verify_chain)

    @property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetCertificateCertificateResult']:
        """
        The certificates protecting the site, with the root of the chain first.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of this data source: hashing of the certificates in the chain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL of the website to get the certificates from. Cannot be used with `content`.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="verifyChain")
    def verify_chain(self) -> Optional[bool]:
        """
        Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
        """
        return pulumi.get(self, "verify_chain")


class AwaitableGetCertificateResult(GetCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateResult(
            certificates=self.certificates,
            content=self.content,
            id=self.id,
            url=self.url,
            verify_chain=self.verify_chain)


def get_certificate(content: Optional[str] = None,
                    url: Optional[str] = None,
                    verify_chain: Optional[bool] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateResult:
    """
    Use this data source to access information about an existing resource.

    :param str content: The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
    :param str url: The URL of the website to get the certificates from. Cannot be used with `content`.
    :param bool verify_chain: Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
    """
    __args__ = dict()
    __args__['content'] = content
    __args__['url'] = url
    __args__['verifyChain'] = verify_chain
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tls:index/getCertificate:getCertificate', __args__, opts=opts, typ=GetCertificateResult).value

    return AwaitableGetCertificateResult(
        certificates=pulumi.get(__ret__, 'certificates'),
        content=pulumi.get(__ret__, 'content'),
        id=pulumi.get(__ret__, 'id'),
        url=pulumi.get(__ret__, 'url'),
        verify_chain=pulumi.get(__ret__, 'verify_chain'))


@_utilities.lift_output_func(get_certificate)
def get_certificate_output(content: Optional[pulumi.Input[Optional[str]]] = None,
                           url: Optional[pulumi.Input[Optional[str]]] = None,
                           verify_chain: Optional[pulumi.Input[Optional[bool]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCertificateResult]:
    """
    Use this data source to access information about an existing resource.

    :param str content: The content of the certificate in [PEM (RFC 1421)](https://datatracker.ietf.org/doc/html/rfc1421) format. Cannot be used with `url`.
    :param str url: The URL of the website to get the certificates from. Cannot be used with `content`.
    :param bool verify_chain: Whether to verify the certificate chain while parsing it or not (default: `true`). Cannot be used with `content`.
    """
    ...
